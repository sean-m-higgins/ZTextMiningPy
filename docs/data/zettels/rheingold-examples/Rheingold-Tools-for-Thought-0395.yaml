title: 01.01.09-Rheingold-Tools-for-Thought-0395
note: |
  Twenty-three years later, he admitted: "It seemed so simple and clear to me then.
  It still does.
  But like so many beginning computerists, I mistook a clear view for a short distance. "
  The Harvard course in computer programming that Ted took in 1960 used the only computer then available at Harvard, the IBM 7090 at the Smithsonian Observatory.
  As a term project, Ted decided to write a machine-language program that would enable him to store his notes and manuscripts in the computer, to change and edit drafts in various ways, and produce final printed versions.
  Somewhere around the forty-thousandth line of his program, it dawned on him that his first estimates of the magnitude of the task -- and the amount of time it would take to establish it -- had been overoptimistic.
  Nelson's inability to create something even though he was able to clearly envision it is not unusual in the software world.
  The problem is so widespread that one of the unofficial rules of computer programming (known in some circles as "Babbage's Law") is: "Any large programming project will always take twice as long as you estimate."
  Even though the simplest of the text-handling capabilities he specified in 1960 were to become, in the hands of other programmers, the software spearhead of office automation in the 1980s, Nelson went far beyond simple text manipulation in the program he set out to write for his term project.
  Like Doug Engelbart, whose work he had yet to learn about, Nelson yearned for more than a lazy man's typewriter.
tags:
- Core Text
- Computing History
- Rheingold 0395
- 1960 year
- 1960s
- 1960 decade
- 1900 century
- 1900s
- 1980s
- 1980 decade
- IBM
- 1900 century mid
- 1900 century late
cite:
  bibkey: Rheingold_ToolsThoughtHistory_2000
  page: PDF eBook

